1- 

CREATE OR REPLACE TRIGGER trg_dbt_prd
AFTER INSERT ON item_venda
REFERENCING NEW AS NEW OLD AS OLD
FOR EACH ROW
BEGIN
 UPDATE produto SET quant_atual = quant_atual - :NEW.quant
 WHERE codpro = :NEW.codpro;
END;


//

CREATE OR REPLACE TRIGGER trg_dbt_prd
AFTER INSERT OR UPDATE OR DELETE ON item_venda
FOR EACH ROW
BEGIN
IF INSERTING THEN
UPDATE produto SET quant_atual = quant_atual - :NEW.quant
WHERE codpro = :NEW.codpro;

ELSIF UPDATING THEN
UPDATE produto SET quant_atual = quant_atual + :OLD.quant
WHERE codpro = :NEW.codpro;

UPDATE produto SET quant_atual = quant_atual - :NEW.quant
WHERE codpro = :NEW.codpro;

ELSIF DELETING THEN
UPDATE produto SET quant_atual = quant_atual + :OLD.quant
WHERE codpro = :NEW.codpro;
END IF;
END;

2 - CREATE SEQUENCE SQ_LOG_PRD
START WITH 1
INCREMENT BY 1
MAXVALUE 9999
NOCACHE
NOCYCLE;


CREATE OR REPLACE TRIGGER TRG_LOG_PROD
AFTER INSERT OR DELETE OR UPDATE ON PRODUTO
FOR EACH ROW
BEGIN
 IF INSERTING THEN
 INSERT INTO LOG_OPERACAO VALUES (SQ_LOG_OP.NEXTVAL, 'INSERÇÃO', NULL, :NEW.PRECO_VENDA, SYSDATE, USER);

ELSIF UPDATING then INSERT INTO LOG_OPERACAO VALUES (SQ_LOG_OP.NEXTVAL, 'ATUALIZAÇÃO', :OLD.PRECO_VENDA,:NEW.PRECO_VENDA, SYSDATE, USER);

ELSIF DELETING THEN
  INSERT INTO LOG_OPERACAO VALUES 
(SQ_LOG_OP.NEXTVAL, 'EXCLUSÃO', :OLD.PRECO_VENDA, 'PRODUTO EXCLUÍDO', SYSDATE, USER);

END IF;
END;

3- 
CREATE OR REPLACE TRIGGER TRG_APAGAR_DEPT
BEFORE DELETE ON DEPARTAMENTO
FOR EACH ROW
BEGIN
 DELETE FROM FUNCIONARIO WHERE SIGLA_DEPARTAMENTO = :OLD.SIGLA_DEPARTAMENTO;
END;

4-

CREATE OR REPLACE TRIGGER TRG_APAGAR_FUNC
BEFORE DELETE ON FUNCIONARIO
FOR EACH ROW
BEGIN
 DELETE FROM DEPENDENTE WHERE matricula_func = :OLD.matricula_func;
END;

5-
CREATE OR REPLACE TRIGGER TRG_SAL_MIN
AFTER INSERT OR UPDATE ON CARGO
REFERENCING NEW AS NEW OLD AS OLD
FOR EACH ROW
BEGIN
 IF :NEW.SALARIO < 1100 THEN
 	:NEW.SALARIO := 1100;
 END IF;
END;


6- CREATE OR REPLACE TRIGGER TRG_FUNC_SOLO
BEFORE INSERT OR UPDATE ON alocacao_func_projeto
REFERENCING NEW AS NEW OLD AS OLD
FOR EACH ROW
DECLARE
  sigla_d funcionario.sigla_departamento%TYPE;
BEGIN
SELECT sigla_departamento INTO sigla_d
  FROM funcionario
  WHERE matricula_func = :new.matricula_func;
 IF sigla_d is null then
       raise_application_error(-20001,'Funcionario sem departamento.');
 END IF;
END;

7- CREATE OR REPLACE TRIGGER TRG_DPND_MAIOR
BEFORE INSERT ON dependente
REFERENCING NEW AS NEW OLD AS OLD
FOR EACH ROW
BEGIN
 IF (SYSDATE-:new.DATA_NASCIMENTO)/365 > 18 then
       raise_application_error(-20001,'Não é possível inserir um dependente maior de 18 anos');
 END IF;
END;